---
- name: Wait for system to be ready
  wait_for_connection:
    timeout: 300
    delay: 5
  register: wait_result

- name: Update apt cache and install required packages
  block:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
        force_apt_get: yes

    - name: Install required packages
      apt:
        name: "{{ packages }}"
        state: present
        force_apt_get: yes
      vars:
        packages:
          # - nginx
          # - docker.io
          # - docker-compose
          - curl
          - git
      retries: 3
      delay: 5
      register: pkg_install
      until: pkg_install is success

- name: Configure hostname
  block:
    - name: Set system hostname
      hostname:
        name: "{{ inventory_hostname }}"
      register: hostname_result

    - name: Update /etc/hostname
      copy:
        content: "{{ inventory_hostname }}\n"
        dest: /etc/hostname
        owner: root
        group: root
        mode: '0644'

    - name: Update /etc/hosts
      lineinfile:
        path: /etc/hosts
        regexp: '^127\.0\.1\.1\s+'
        line: "127.0.1.1 {{ inventory_hostname }}"
        state: present

    - name: Verify hostname is set correctly
      command: hostname
      register: hostname_check
      changed_when: false
      failed_when: hostname_check.stdout != inventory_hostname

# - name: Configure services
#   async: 300  # Timeout de 5 minutos
#   poll: 0     # No esperar a que termine (fire and forget)
#   block:
#     - name: Start and enable services
#       service:
#         name: "{{ item }}"
#         state: started
#         enabled: yes
#       loop:
#         - nginx
#         - docker
#       ignore_errors: yes

#     - name: Allow HTTP on firewall
#       ufw:
#         rule: allow
#         port: '80'
#         proto: tcp
#       ignore_errors: yes

- name: Create a new file
  copy:
    dest: /root/newfile.txt
    content: "Talis! ðŸš€\n"

# --- Payload Handling --- #

- name: Check if payload variables are defined for host (debug) # Optional debug task
  ansible.builtin.debug:
    msg: "Payload present: {{ hostvars[inventory_hostname].payload_present | default('Not Set') }}, Src: {{ hostvars[inventory_hostname].payload_src_path | default('Not Set') }}, Dest: {{ hostvars[inventory_hostname].payload_dest_path | default('Not Set') }}"
  tags:
    - payload
    - debug # Separate tag for debug tasks
  # Only run debug if payload_present seems true, avoids clutter otherwise
  when: hostvars[inventory_hostname].payload_present | default(false)

- name: Copy payload script to instance if present
  ansible.builtin.copy:
    # Use the source path on the controller passed from Go
    src: "{{ hostvars[inventory_hostname].payload_src_path }}"
    # Use the destination path passed from Go
    dest: "{{ hostvars[inventory_hostname].payload_dest_path }}"
    owner: root  # Set owner to root
    group: root  # Set group to root
    mode: '0700' # Set permissions (read/write/execute for owner only)
  # This task only runs if 'payload_present' is true for the specific host
  when: hostvars[inventory_hostname].payload_present | default(false)
  tags:
    - payload # Tag for potentially running only payload tasks

- name: Execute payload script if requested
  ansible.builtin.shell:
    # Execute the script using bash
    cmd: "bash {{ hostvars[inventory_hostname].payload_dest_path }}"
    # Optionally change to the directory where the script is, although /root is often fine
    # chdir: /root
  # This task only runs if payload is present AND execution is requested
  when:
    - hostvars[inventory_hostname].payload_present | default(false)
    - hostvars[inventory_hostname].payload_execute | default(false)
  tags:
    - payload # Keep the same tag for consistency
