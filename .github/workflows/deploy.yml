name: Deploy to Production

on:
  workflow_run:
    workflows: ["Docker Build & Publish"]
    types:
      - completed
  workflow_dispatch:
  release:
    types: [published]

jobs:
  deploy:
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' && startsWith(github.event.workflow_run.head_branch, 'refs/tags/')) ||
      github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get release tag
        id: get_tag
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          elif [[ "$GITHUB_EVENT_NAME" == "workflow_run" ]]; then
            echo "TAG=${GITHUB_EVENT_WORKFLOW_RUN_HEAD_BRANCH#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "[ERROR] Invalid trigger: $GITHUB_EVENT_NAME"
            exit 1
          fi

      - name: Wait for Docker Build to complete
        if: github.event_name == 'release'
        run: |
          # Get the tag from the release event
          TAG=${GITHUB_REF#refs/tags/}
          echo "[INFO] Waiting for Docker Build workflow to complete for tag: $TAG"

          # Initialize counter
          ATTEMPTS=0
          MAX_ATTEMPTS=10

          # Wait for the Docker Build workflow to complete
          while true; do
            # Increment attempt counter
            ATTEMPTS=$((ATTEMPTS + 1))

            # Get the most recent workflow run for Docker Build & Publish
            RUNS=$(gh api repos/${{ github.repository }}/actions/workflows/docker-build.yml/runs --jq '.workflow_runs[0]')
            RUN_CONCLUSION=$(echo $RUNS | jq -r '.conclusion')
            RUN_HEAD_REF=$(echo $RUNS | jq -r '.head_branch')

            if [ "$RUN_CONCLUSION" = "success" ] && [ "$RUN_HEAD_REF" = "$TAG" ]; then
              echo "[INFO] Docker Build workflow completed successfully for tag: $TAG"
              break
            elif [ "$RUN_CONCLUSION" = "failure" ] || [ "$RUN_CONCLUSION" = "cancelled" ]; then
              echo "[ERROR] Docker Build workflow failed or was cancelled for tag: $TAG"
              exit 1
            elif [ $ATTEMPTS -ge $MAX_ATTEMPTS ]; then
              echo "[ERROR] Timed out waiting for Docker Build workflow after $MAX_ATTEMPTS attempts (5 minutes)"
              exit 1
            fi

            echo "[INFO] Waiting for Docker Build workflow to complete... (Attempt $ATTEMPTS/$MAX_ATTEMPTS)"
            sleep 30
          done

      - name: Copy docker-compose file to server
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "docker-compose.yml"
          target: ${{ secrets.DEPLOYMENT_DIR }}

      - name: Update image tag and deploy
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: TAG=${{ steps.get_tag.outputs.TAG }}
          script: |
            cd ${{ secrets.DEPLOYMENT_DIR }}
            echo "[INFO] Deploying tag: ${{ steps.get_tag.outputs.TAG }}"
            sed -i "s|ghcr.io/celestiaorg/talis:.*|ghcr.io/celestiaorg/talis:${{ steps.get_tag.outputs.TAG }}|" docker-compose.yml
            docker compose pull
            docker compose up -d --force-recreate api
